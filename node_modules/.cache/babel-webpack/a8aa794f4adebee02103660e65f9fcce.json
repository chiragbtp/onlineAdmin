{"ast":null,"code":"import _get from \"/home/brsoft/Desktop/My data/Desktop/maiapayadmin/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/home/brsoft/Desktop/My data/Desktop/maiapayadmin/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _classCallCheck from \"/home/brsoft/Desktop/My data/Desktop/maiapayadmin/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/brsoft/Desktop/My data/Desktop/maiapayadmin/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/brsoft/Desktop/My data/Desktop/maiapayadmin/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/brsoft/Desktop/My data/Desktop/maiapayadmin/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\n * @license Angular v10.1.4\n * (c) 2010-2020 Google LLC. https://angular.io/\n * License: MIT\n */\nimport { ResourceLoader, core, DirectiveResolver, NgModuleResolver, PipeResolver } from '@angular/compiler';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A mock implementation of {@link ResourceLoader} that allows outgoing requests to be mocked\n * and responded to within a single test, without going to the network.\n */\n\nvar MockResourceLoader = /*#__PURE__*/function (_ResourceLoader) {\n  _inherits(MockResourceLoader, _ResourceLoader);\n\n  var _super = _createSuper(MockResourceLoader);\n\n  function MockResourceLoader() {\n    var _this;\n\n    _classCallCheck(this, MockResourceLoader);\n\n    _this = _super.apply(this, arguments);\n    _this._expectations = [];\n    _this._definitions = new Map();\n    _this._requests = [];\n    return _this;\n  }\n\n  _createClass(MockResourceLoader, [{\n    key: \"get\",\n    value: function get(url) {\n      var request = new _PendingRequest(url);\n\n      this._requests.push(request);\n\n      return request.getPromise();\n    }\n  }, {\n    key: \"hasPendingRequests\",\n    value: function hasPendingRequests() {\n      return !!this._requests.length;\n    }\n    /**\n     * Add an expectation for the given URL. Incoming requests will be checked against\n     * the next expectation (in FIFO order). The `verifyNoOutstandingExpectations` method\n     * can be used to check if any expectations have not yet been met.\n     *\n     * The response given will be returned if the expectation matches.\n     */\n\n  }, {\n    key: \"expect\",\n    value: function expect(url, response) {\n      var expectation = new _Expectation(url, response);\n\n      this._expectations.push(expectation);\n    }\n    /**\n     * Add a definition for the given URL to return the given response. Unlike expectations,\n     * definitions have no order and will satisfy any matching request at any time. Also\n     * unlike expectations, unused definitions do not cause `verifyNoOutstandingExpectations`\n     * to return an error.\n     */\n\n  }, {\n    key: \"when\",\n    value: function when(url, response) {\n      this._definitions.set(url, response);\n    }\n    /**\n     * Process pending requests and verify there are no outstanding expectations. Also fails\n     * if no requests are pending.\n     */\n\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      if (this._requests.length === 0) {\n        throw new Error('No pending requests to flush');\n      }\n\n      do {\n        this._processRequest(this._requests.shift());\n      } while (this._requests.length > 0);\n\n      this.verifyNoOutstandingExpectations();\n    }\n    /**\n     * Throw an exception if any expectations have not been satisfied.\n     */\n\n  }, {\n    key: \"verifyNoOutstandingExpectations\",\n    value: function verifyNoOutstandingExpectations() {\n      if (this._expectations.length === 0) return;\n      var urls = [];\n\n      for (var i = 0; i < this._expectations.length; i++) {\n        var expectation = this._expectations[i];\n        urls.push(expectation.url);\n      }\n\n      throw new Error(\"Unsatisfied requests: \".concat(urls.join(', ')));\n    }\n  }, {\n    key: \"_processRequest\",\n    value: function _processRequest(request) {\n      var url = request.url;\n\n      if (this._expectations.length > 0) {\n        var expectation = this._expectations[0];\n\n        if (expectation.url == url) {\n          remove(this._expectations, expectation);\n          request.complete(expectation.response);\n          return;\n        }\n      }\n\n      if (this._definitions.has(url)) {\n        var response = this._definitions.get(url);\n\n        request.complete(response == null ? null : response);\n        return;\n      }\n\n      throw new Error(\"Unexpected request \".concat(url));\n    }\n  }]);\n\n  return MockResourceLoader;\n}(ResourceLoader);\n\nvar _PendingRequest = /*#__PURE__*/function () {\n  function _PendingRequest(url) {\n    var _this2 = this;\n\n    _classCallCheck(this, _PendingRequest);\n\n    this.url = url;\n    this.promise = new Promise(function (res, rej) {\n      _this2.resolve = res;\n      _this2.reject = rej;\n    });\n  }\n\n  _createClass(_PendingRequest, [{\n    key: \"complete\",\n    value: function complete(response) {\n      if (response == null) {\n        this.reject(\"Failed to load \".concat(this.url));\n      } else {\n        this.resolve(response);\n      }\n    }\n  }, {\n    key: \"getPromise\",\n    value: function getPromise() {\n      return this.promise;\n    }\n  }]);\n\n  return _PendingRequest;\n}();\n\nvar _Expectation = function _Expectation(url, response) {\n  _classCallCheck(this, _Expectation);\n\n  this.url = url;\n  this.response = response;\n};\n\nfunction remove(list, el) {\n  var index = list.indexOf(el);\n\n  if (index > -1) {\n    list.splice(index, 1);\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MockSchemaRegistry = /*#__PURE__*/function () {\n  function MockSchemaRegistry(existingProperties, attrPropMapping, existingElements, invalidProperties, invalidAttributes) {\n    _classCallCheck(this, MockSchemaRegistry);\n\n    this.existingProperties = existingProperties;\n    this.attrPropMapping = attrPropMapping;\n    this.existingElements = existingElements;\n    this.invalidProperties = invalidProperties;\n    this.invalidAttributes = invalidAttributes;\n  }\n\n  _createClass(MockSchemaRegistry, [{\n    key: \"hasProperty\",\n    value: function hasProperty(tagName, property, schemas) {\n      var value = this.existingProperties[property];\n      return value === void 0 ? true : value;\n    }\n  }, {\n    key: \"hasElement\",\n    value: function hasElement(tagName, schemaMetas) {\n      var value = this.existingElements[tagName.toLowerCase()];\n      return value === void 0 ? true : value;\n    }\n  }, {\n    key: \"allKnownElementNames\",\n    value: function allKnownElementNames() {\n      return Object.keys(this.existingElements);\n    }\n  }, {\n    key: \"securityContext\",\n    value: function securityContext(selector, property, isAttribute) {\n      return core.SecurityContext.NONE;\n    }\n  }, {\n    key: \"getMappedPropName\",\n    value: function getMappedPropName(attrName) {\n      return this.attrPropMapping[attrName] || attrName;\n    }\n  }, {\n    key: \"getDefaultComponentElementName\",\n    value: function getDefaultComponentElementName() {\n      return 'ng-component';\n    }\n  }, {\n    key: \"validateProperty\",\n    value: function validateProperty(name) {\n      if (this.invalidProperties.indexOf(name) > -1) {\n        return {\n          error: true,\n          msg: \"Binding to property '\".concat(name, \"' is disallowed for security reasons\")\n        };\n      } else {\n        return {\n          error: false\n        };\n      }\n    }\n  }, {\n    key: \"validateAttribute\",\n    value: function validateAttribute(name) {\n      if (this.invalidAttributes.indexOf(name) > -1) {\n        return {\n          error: true,\n          msg: \"Binding to attribute '\".concat(name, \"' is disallowed for security reasons\")\n        };\n      } else {\n        return {\n          error: false\n        };\n      }\n    }\n  }, {\n    key: \"normalizeAnimationStyleProperty\",\n    value: function normalizeAnimationStyleProperty(propName) {\n      return propName;\n    }\n  }, {\n    key: \"normalizeAnimationStyleValue\",\n    value: function normalizeAnimationStyleValue(camelCaseProp, userProvidedProp, val) {\n      return {\n        error: null,\n        value: val.toString()\n      };\n    }\n  }]);\n\n  return MockSchemaRegistry;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * An implementation of {@link DirectiveResolver} that allows overriding\n * various properties of directives.\n */\n\n\nvar MockDirectiveResolver = /*#__PURE__*/function (_DirectiveResolver) {\n  _inherits(MockDirectiveResolver, _DirectiveResolver);\n\n  var _super2 = _createSuper(MockDirectiveResolver);\n\n  function MockDirectiveResolver(reflector) {\n    var _this3;\n\n    _classCallCheck(this, MockDirectiveResolver);\n\n    _this3 = _super2.call(this, reflector);\n    _this3._directives = new Map();\n    return _this3;\n  }\n\n  _createClass(MockDirectiveResolver, [{\n    key: \"resolve\",\n    value: function resolve(type) {\n      var throwIfNotFound = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      return this._directives.get(type) || _get(_getPrototypeOf(MockDirectiveResolver.prototype), \"resolve\", this).call(this, type, throwIfNotFound);\n    }\n    /**\n     * Overrides the {@link core.Directive} for a directive.\n     */\n\n  }, {\n    key: \"setDirective\",\n    value: function setDirective(type, metadata) {\n      this._directives.set(type, metadata);\n    }\n  }]);\n\n  return MockDirectiveResolver;\n}(DirectiveResolver);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MockNgModuleResolver = /*#__PURE__*/function (_NgModuleResolver) {\n  _inherits(MockNgModuleResolver, _NgModuleResolver);\n\n  var _super3 = _createSuper(MockNgModuleResolver);\n\n  function MockNgModuleResolver(reflector) {\n    var _this4;\n\n    _classCallCheck(this, MockNgModuleResolver);\n\n    _this4 = _super3.call(this, reflector);\n    _this4._ngModules = new Map();\n    return _this4;\n  }\n  /**\n   * Overrides the {@link NgModule} for a module.\n   */\n\n\n  _createClass(MockNgModuleResolver, [{\n    key: \"setNgModule\",\n    value: function setNgModule(type, metadata) {\n      this._ngModules.set(type, metadata);\n    }\n    /**\n     * Returns the {@link NgModule} for a module:\n     * - Set the {@link NgModule} to the overridden view when it exists or fallback to the\n     * default\n     * `NgModuleResolver`, see `setNgModule`.\n     */\n\n  }, {\n    key: \"resolve\",\n    value: function resolve(type) {\n      var throwIfNotFound = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      return this._ngModules.get(type) || _get(_getPrototypeOf(MockNgModuleResolver.prototype), \"resolve\", this).call(this, type, throwIfNotFound);\n    }\n  }]);\n\n  return MockNgModuleResolver;\n}(NgModuleResolver);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MockPipeResolver = /*#__PURE__*/function (_PipeResolver) {\n  _inherits(MockPipeResolver, _PipeResolver);\n\n  var _super4 = _createSuper(MockPipeResolver);\n\n  function MockPipeResolver(refector) {\n    var _this5;\n\n    _classCallCheck(this, MockPipeResolver);\n\n    _this5 = _super4.call(this, refector);\n    _this5._pipes = new Map();\n    return _this5;\n  }\n  /**\n   * Overrides the {@link Pipe} for a pipe.\n   */\n\n\n  _createClass(MockPipeResolver, [{\n    key: \"setPipe\",\n    value: function setPipe(type, metadata) {\n      this._pipes.set(type, metadata);\n    }\n    /**\n     * Returns the {@link Pipe} for a pipe:\n     * - Set the {@link Pipe} to the overridden view when it exists or fallback to the\n     * default\n     * `PipeResolver`, see `setPipe`.\n     */\n\n  }, {\n    key: \"resolve\",\n    value: function resolve(type) {\n      var throwIfNotFound = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      var metadata = this._pipes.get(type);\n\n      if (!metadata) {\n        metadata = _get(_getPrototypeOf(MockPipeResolver.prototype), \"resolve\", this).call(this, type, throwIfNotFound);\n      }\n\n      return metadata;\n    }\n  }]);\n\n  return MockPipeResolver;\n}(PipeResolver);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MockDirectiveResolver, MockNgModuleResolver, MockPipeResolver, MockResourceLoader, MockSchemaRegistry };","map":{"version":3,"sources":["../../../../../../packages/compiler/testing/src/resource_loader_mock.ts","../../../../../../packages/compiler/testing/src/schema_registry_mock.ts","../../../../../../packages/compiler/testing/src/directive_resolver_mock.ts","../../../../../../packages/compiler/testing/src/ng_module_resolver_mock.ts","../../../../../../packages/compiler/testing/src/pipe_resolver_mock.ts","../../../../../../packages/compiler/testing/src/testing.ts","../../../../../../packages/compiler/testing/public_api.ts","../../../../../../packages/compiler/testing/index.ts","../../../../../../packages/compiler/testing/testing.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ResourceLoader} from '@angular/compiler';\n\n/**\n * A mock implementation of {@link ResourceLoader} that allows outgoing requests to be mocked\n * and responded to within a single test, without going to the network.\n */\nexport class MockResourceLoader extends ResourceLoader {\n  private _expectations: _Expectation[] = [];\n  private _definitions = new Map<string, string>();\n  private _requests: _PendingRequest[] = [];\n\n  get(url: string): Promise<string> {\n    const request = new _PendingRequest(url);\n    this._requests.push(request);\n    return request.getPromise();\n  }\n\n  hasPendingRequests() {\n    return !!this._requests.length;\n  }\n\n  /**\n   * Add an expectation for the given URL. Incoming requests will be checked against\n   * the next expectation (in FIFO order). The `verifyNoOutstandingExpectations` method\n   * can be used to check if any expectations have not yet been met.\n   *\n   * The response given will be returned if the expectation matches.\n   */\n  expect(url: string, response: string) {\n    const expectation = new _Expectation(url, response);\n    this._expectations.push(expectation);\n  }\n\n  /**\n   * Add a definition for the given URL to return the given response. Unlike expectations,\n   * definitions have no order and will satisfy any matching request at any time. Also\n   * unlike expectations, unused definitions do not cause `verifyNoOutstandingExpectations`\n   * to return an error.\n   */\n  when(url: string, response: string) {\n    this._definitions.set(url, response);\n  }\n\n  /**\n   * Process pending requests and verify there are no outstanding expectations. Also fails\n   * if no requests are pending.\n   */\n  flush() {\n    if (this._requests.length === 0) {\n      throw new Error('No pending requests to flush');\n    }\n\n    do {\n      this._processRequest(this._requests.shift()!);\n    } while (this._requests.length > 0);\n\n    this.verifyNoOutstandingExpectations();\n  }\n\n  /**\n   * Throw an exception if any expectations have not been satisfied.\n   */\n  verifyNoOutstandingExpectations() {\n    if (this._expectations.length === 0) return;\n\n    const urls: string[] = [];\n    for (let i = 0; i < this._expectations.length; i++) {\n      const expectation = this._expectations[i];\n      urls.push(expectation.url);\n    }\n\n    throw new Error(`Unsatisfied requests: ${urls.join(', ')}`);\n  }\n\n  private _processRequest(request: _PendingRequest) {\n    const url = request.url;\n\n    if (this._expectations.length > 0) {\n      const expectation = this._expectations[0];\n      if (expectation.url == url) {\n        remove(this._expectations, expectation);\n        request.complete(expectation.response);\n        return;\n      }\n    }\n\n    if (this._definitions.has(url)) {\n      const response = this._definitions.get(url);\n      request.complete(response == null ? null : response);\n      return;\n    }\n\n    throw new Error(`Unexpected request ${url}`);\n  }\n}\n\nclass _PendingRequest {\n  // TODO(issue/24571): remove '!'.\n  resolve!: (result: string) => void;\n  // TODO(issue/24571): remove '!'.\n  reject!: (error: any) => void;\n  promise: Promise<string>;\n\n  constructor(public url: string) {\n    this.promise = new Promise((res, rej) => {\n      this.resolve = res;\n      this.reject = rej;\n    });\n  }\n\n  complete(response: string|null) {\n    if (response == null) {\n      this.reject(`Failed to load ${this.url}`);\n    } else {\n      this.resolve(response);\n    }\n  }\n\n  getPromise(): Promise<string> {\n    return this.promise;\n  }\n}\n\nclass _Expectation {\n  url: string;\n  response: string;\n  constructor(url: string, response: string) {\n    this.url = url;\n    this.response = response;\n  }\n}\n\nfunction remove<T>(list: T[], el: T): void {\n  const index = list.indexOf(el);\n  if (index > -1) {\n    list.splice(index, 1);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {core, ElementSchemaRegistry} from '@angular/compiler';\n\nexport class MockSchemaRegistry implements ElementSchemaRegistry {\n  constructor(\n      public existingProperties: {[key: string]: boolean},\n      public attrPropMapping: {[key: string]: string},\n      public existingElements: {[key: string]: boolean}, public invalidProperties: Array<string>,\n      public invalidAttributes: Array<string>) {}\n\n  hasProperty(tagName: string, property: string, schemas: core.SchemaMetadata[]): boolean {\n    const value = this.existingProperties[property];\n    return value === void 0 ? true : value;\n  }\n\n  hasElement(tagName: string, schemaMetas: core.SchemaMetadata[]): boolean {\n    const value = this.existingElements[tagName.toLowerCase()];\n    return value === void 0 ? true : value;\n  }\n\n  allKnownElementNames(): string[] {\n    return Object.keys(this.existingElements);\n  }\n\n  securityContext(selector: string, property: string, isAttribute: boolean): core.SecurityContext {\n    return core.SecurityContext.NONE;\n  }\n\n  getMappedPropName(attrName: string): string {\n    return this.attrPropMapping[attrName] || attrName;\n  }\n\n  getDefaultComponentElementName(): string {\n    return 'ng-component';\n  }\n\n  validateProperty(name: string): {error: boolean, msg?: string} {\n    if (this.invalidProperties.indexOf(name) > -1) {\n      return {error: true, msg: `Binding to property '${name}' is disallowed for security reasons`};\n    } else {\n      return {error: false};\n    }\n  }\n\n  validateAttribute(name: string): {error: boolean, msg?: string} {\n    if (this.invalidAttributes.indexOf(name) > -1) {\n      return {\n        error: true,\n        msg: `Binding to attribute '${name}' is disallowed for security reasons`\n      };\n    } else {\n      return {error: false};\n    }\n  }\n\n  normalizeAnimationStyleProperty(propName: string): string {\n    return propName;\n  }\n  normalizeAnimationStyleValue(camelCaseProp: string, userProvidedProp: string, val: string|number):\n      {error: string, value: string} {\n    return {error: null!, value: val.toString()};\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CompileReflector, core, DirectiveResolver} from '@angular/compiler';\n\n/**\n * An implementation of {@link DirectiveResolver} that allows overriding\n * various properties of directives.\n */\nexport class MockDirectiveResolver extends DirectiveResolver {\n  private _directives = new Map<core.Type, core.Directive>();\n\n  constructor(reflector: CompileReflector) {\n    super(reflector);\n  }\n\n  resolve(type: core.Type): core.Directive;\n  resolve(type: core.Type, throwIfNotFound: true): core.Directive;\n  resolve(type: core.Type, throwIfNotFound: boolean): core.Directive|null;\n  resolve(type: core.Type, throwIfNotFound = true): core.Directive|null {\n    return this._directives.get(type) || super.resolve(type, throwIfNotFound);\n  }\n\n  /**\n   * Overrides the {@link core.Directive} for a directive.\n   */\n  setDirective(type: core.Type, metadata: core.Directive): void {\n    this._directives.set(type, metadata);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileReflector, core, NgModuleResolver} from '@angular/compiler';\n\nexport class MockNgModuleResolver extends NgModuleResolver {\n  private _ngModules = new Map<core.Type, core.NgModule>();\n\n  constructor(reflector: CompileReflector) {\n    super(reflector);\n  }\n\n  /**\n   * Overrides the {@link NgModule} for a module.\n   */\n  setNgModule(type: core.Type, metadata: core.NgModule): void {\n    this._ngModules.set(type, metadata);\n  }\n\n  /**\n   * Returns the {@link NgModule} for a module:\n   * - Set the {@link NgModule} to the overridden view when it exists or fallback to the\n   * default\n   * `NgModuleResolver`, see `setNgModule`.\n   */\n  resolve(type: core.Type, throwIfNotFound = true): core.NgModule {\n    return this._ngModules.get(type) || super.resolve(type, throwIfNotFound)!;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileReflector, core, PipeResolver} from '@angular/compiler';\n\nexport class MockPipeResolver extends PipeResolver {\n  private _pipes = new Map<core.Type, core.Pipe>();\n\n  constructor(refector: CompileReflector) {\n    super(refector);\n  }\n\n  /**\n   * Overrides the {@link Pipe} for a pipe.\n   */\n  setPipe(type: core.Type, metadata: core.Pipe): void {\n    this._pipes.set(type, metadata);\n  }\n\n  /**\n   * Returns the {@link Pipe} for a pipe:\n   * - Set the {@link Pipe} to the overridden view when it exists or fallback to the\n   * default\n   * `PipeResolver`, see `setPipe`.\n   */\n  resolve(type: core.Type, throwIfNotFound = true): core.Pipe {\n    let metadata = this._pipes.get(type);\n    if (!metadata) {\n      metadata = super.resolve(type, throwIfNotFound)!;\n    }\n    return metadata;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all APIs of the compiler package.\n *\n * <div class=\"callout is-critical\">\n *   <header>Unstable APIs</header>\n *   <p>\n *     All compiler apis are currently considered experimental and private!\n *   </p>\n *   <p>\n *     We expect the APIs in this package to keep on changing. Do not rely on them.\n *   </p>\n * </div>\n */\nexport * from './resource_loader_mock';\nexport * from './schema_registry_mock';\nexport * from './directive_resolver_mock';\nexport * from './ng_module_resolver_mock';\nexport * from './pipe_resolver_mock';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/// <reference types=\"node\" />\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport * from './src/testing';\n\n// This file only reexports content of the `src` folder. Keep it that way.\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// This file is not used to build this module. It is only used during editing\n// by the TypeScript language service and during build for verification. `ngc`\n// replaces this file with production index.ts when it rewrites private symbol\n// names.\n\nexport * from './public_api';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]},"metadata":{},"sourceType":"module"}
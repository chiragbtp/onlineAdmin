{"ast":null,"code":"import _classCallCheck from \"/home/brsoft/Desktop/My data/Desktop/maiapayadmin/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/brsoft/Desktop/My data/Desktop/maiapayadmin/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/brsoft/Desktop/My data/Desktop/maiapayadmin/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/brsoft/Desktop/My data/Desktop/maiapayadmin/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\n * @license Angular v10.1.4\n * (c) 2010-2020 Google LLC. https://angular.io/\n * License: MIT\n */\nimport { Injectable, Inject, ɵstringify, NgModule, Directive, Component, Pipe, createPlatformFactory, COMPILER_OPTIONS, Injector, CompilerFactory } from '@angular/core';\nimport { TestComponentRenderer, ɵMetadataOverrider, ɵTestingCompilerFactory } from '@angular/core/testing';\nimport { ɵplatformCoreDynamic, ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS } from '@angular/platform-browser-dynamic';\nimport { BrowserTestingModule } from '@angular/platform-browser/testing';\nimport { ɵgetDOM, DOCUMENT } from '@angular/common';\nimport { CompileReflector, PipeResolver, DirectiveResolver, NgModuleResolver, ERROR_COMPONENT_TYPE } from '@angular/compiler';\nimport { MockPipeResolver, MockDirectiveResolver, MockNgModuleResolver } from '@angular/compiler/testing';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A DOM based implementation of the TestComponentRenderer.\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nvar DOMTestComponentRenderer = /*#__PURE__*/function (_TestComponentRendere) {\n  _inherits(DOMTestComponentRenderer, _TestComponentRendere);\n\n  var _super = _createSuper(DOMTestComponentRenderer);\n\n  function DOMTestComponentRenderer(_doc) {\n    var _this;\n\n    _classCallCheck(this, DOMTestComponentRenderer);\n\n    _this = _super.call(this);\n    _this._doc = _doc;\n    return _this;\n  }\n\n  _createClass(DOMTestComponentRenderer, [{\n    key: \"insertRootElement\",\n    value: function insertRootElement(rootElId) {\n      var template = ɵgetDOM().getDefaultDocument().createElement('template');\n      template.innerHTML = \"<div id=\\\"\".concat(rootElId, \"\\\"></div>\");\n      var rootEl = getContent(template).firstChild; // TODO(juliemr): can/should this be optional?\n\n      var oldRoots = this._doc.querySelectorAll('[id^=root]');\n\n      for (var i = 0; i < oldRoots.length; i++) {\n        ɵgetDOM().remove(oldRoots[i]);\n      }\n\n      this._doc.body.appendChild(rootEl);\n    }\n  }]);\n\n  return DOMTestComponentRenderer;\n}(TestComponentRenderer);\n\nDOMTestComponentRenderer.ɵfac = function DOMTestComponentRenderer_Factory(t) {\n  return new (t || DOMTestComponentRenderer)(ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nDOMTestComponentRenderer.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: DOMTestComponentRenderer,\n  factory: DOMTestComponentRenderer.ɵfac\n});\n\nDOMTestComponentRenderer.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(DOMTestComponentRenderer, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n\nfunction getContent(node) {\n  if ('content' in node) {\n    return node.content;\n  } else {\n    return node;\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar COMPILER_PROVIDERS = [{\n  provide: MockPipeResolver,\n  deps: [CompileReflector]\n}, {\n  provide: PipeResolver,\n  useExisting: MockPipeResolver\n}, {\n  provide: MockDirectiveResolver,\n  deps: [CompileReflector]\n}, {\n  provide: DirectiveResolver,\n  useExisting: MockDirectiveResolver\n}, {\n  provide: MockNgModuleResolver,\n  deps: [CompileReflector]\n}, {\n  provide: NgModuleResolver,\n  useExisting: MockNgModuleResolver\n}];\n\nvar TestingCompilerFactoryImpl = /*#__PURE__*/function () {\n  function TestingCompilerFactoryImpl(_injector, _compilerFactory) {\n    _classCallCheck(this, TestingCompilerFactoryImpl);\n\n    this._injector = _injector;\n    this._compilerFactory = _compilerFactory;\n  }\n\n  _createClass(TestingCompilerFactoryImpl, [{\n    key: \"createTestingCompiler\",\n    value: function createTestingCompiler(options) {\n      var compiler = this._compilerFactory.createCompiler(options);\n\n      return new TestingCompilerImpl(compiler, compiler.injector.get(MockDirectiveResolver), compiler.injector.get(MockPipeResolver), compiler.injector.get(MockNgModuleResolver));\n    }\n  }]);\n\n  return TestingCompilerFactoryImpl;\n}();\n\nvar TestingCompilerImpl = /*#__PURE__*/function () {\n  function TestingCompilerImpl(_compiler, _directiveResolver, _pipeResolver, _moduleResolver) {\n    _classCallCheck(this, TestingCompilerImpl);\n\n    this._compiler = _compiler;\n    this._directiveResolver = _directiveResolver;\n    this._pipeResolver = _pipeResolver;\n    this._moduleResolver = _moduleResolver;\n    this._overrider = new ɵMetadataOverrider();\n  }\n\n  _createClass(TestingCompilerImpl, [{\n    key: \"injector\",\n    get: function get() {\n      return this._compiler.injector;\n    }\n  }, {\n    key: \"compileModuleSync\",\n    value: function compileModuleSync(moduleType) {\n      return this._compiler.compileModuleSync(moduleType);\n    }\n  }, {\n    key: \"compileModuleAsync\",\n    value: function compileModuleAsync(moduleType) {\n      return this._compiler.compileModuleAsync(moduleType);\n    }\n  }, {\n    key: \"compileModuleAndAllComponentsSync\",\n    value: function compileModuleAndAllComponentsSync(moduleType) {\n      return this._compiler.compileModuleAndAllComponentsSync(moduleType);\n    }\n  }, {\n    key: \"compileModuleAndAllComponentsAsync\",\n    value: function compileModuleAndAllComponentsAsync(moduleType) {\n      return this._compiler.compileModuleAndAllComponentsAsync(moduleType);\n    }\n  }, {\n    key: \"getComponentFactory\",\n    value: function getComponentFactory(component) {\n      return this._compiler.getComponentFactory(component);\n    }\n  }, {\n    key: \"checkOverrideAllowed\",\n    value: function checkOverrideAllowed(type) {\n      if (this._compiler.hasAotSummary(type)) {\n        throw new Error(\"\".concat(ɵstringify(type), \" was AOT compiled, so its metadata cannot be changed.\"));\n      }\n    }\n  }, {\n    key: \"overrideModule\",\n    value: function overrideModule(ngModule, override) {\n      this.checkOverrideAllowed(ngModule);\n\n      var oldMetadata = this._moduleResolver.resolve(ngModule, false);\n\n      this._moduleResolver.setNgModule(ngModule, this._overrider.overrideMetadata(NgModule, oldMetadata, override));\n\n      this.clearCacheFor(ngModule);\n    }\n  }, {\n    key: \"overrideDirective\",\n    value: function overrideDirective(directive, override) {\n      this.checkOverrideAllowed(directive);\n\n      var oldMetadata = this._directiveResolver.resolve(directive, false);\n\n      this._directiveResolver.setDirective(directive, this._overrider.overrideMetadata(Directive, oldMetadata, override));\n\n      this.clearCacheFor(directive);\n    }\n  }, {\n    key: \"overrideComponent\",\n    value: function overrideComponent(component, override) {\n      this.checkOverrideAllowed(component);\n\n      var oldMetadata = this._directiveResolver.resolve(component, false);\n\n      this._directiveResolver.setDirective(component, this._overrider.overrideMetadata(Component, oldMetadata, override));\n\n      this.clearCacheFor(component);\n    }\n  }, {\n    key: \"overridePipe\",\n    value: function overridePipe(pipe, override) {\n      this.checkOverrideAllowed(pipe);\n\n      var oldMetadata = this._pipeResolver.resolve(pipe, false);\n\n      this._pipeResolver.setPipe(pipe, this._overrider.overrideMetadata(Pipe, oldMetadata, override));\n\n      this.clearCacheFor(pipe);\n    }\n  }, {\n    key: \"loadAotSummaries\",\n    value: function loadAotSummaries(summaries) {\n      this._compiler.loadAotSummaries(summaries);\n    }\n  }, {\n    key: \"clearCache\",\n    value: function clearCache() {\n      this._compiler.clearCache();\n    }\n  }, {\n    key: \"clearCacheFor\",\n    value: function clearCacheFor(type) {\n      this._compiler.clearCacheFor(type);\n    }\n  }, {\n    key: \"getComponentFromError\",\n    value: function getComponentFromError(error) {\n      return error[ERROR_COMPONENT_TYPE] || null;\n    }\n  }, {\n    key: \"getModuleId\",\n    value: function getModuleId(moduleType) {\n      return this._moduleResolver.resolve(moduleType, true).id;\n    }\n  }]);\n\n  return TestingCompilerImpl;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar ɵ0 = {\n  providers: COMPILER_PROVIDERS\n};\n/**\n * Platform for dynamic tests\n *\n * @publicApi\n */\n\nvar platformCoreDynamicTesting = createPlatformFactory(ɵplatformCoreDynamic, 'coreDynamicTesting', [{\n  provide: COMPILER_OPTIONS,\n  useValue: ɵ0,\n  multi: true\n}, {\n  provide: ɵTestingCompilerFactory,\n  useClass: TestingCompilerFactoryImpl,\n  deps: [Injector, CompilerFactory]\n}]);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @publicApi\n */\n\nvar platformBrowserDynamicTesting = createPlatformFactory(platformCoreDynamicTesting, 'browserDynamicTesting', ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS);\n/**\n * NgModule for testing.\n *\n * @publicApi\n */\n\nvar BrowserDynamicTestingModule = function BrowserDynamicTestingModule() {\n  _classCallCheck(this, BrowserDynamicTestingModule);\n};\n\nBrowserDynamicTestingModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: BrowserDynamicTestingModule\n});\nBrowserDynamicTestingModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function BrowserDynamicTestingModule_Factory(t) {\n    return new (t || BrowserDynamicTestingModule)();\n  },\n  providers: [{\n    provide: TestComponentRenderer,\n    useClass: DOMTestComponentRenderer\n  }],\n  imports: [BrowserTestingModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(BrowserDynamicTestingModule, {\n    exports: function exports() {\n      return [BrowserTestingModule];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(BrowserDynamicTestingModule, [{\n    type: NgModule,\n    args: [{\n      exports: [BrowserTestingModule],\n      providers: [{\n        provide: TestComponentRenderer,\n        useClass: DOMTestComponentRenderer\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BrowserDynamicTestingModule, platformBrowserDynamicTesting, DOMTestComponentRenderer as ɵDOMTestComponentRenderer, COMPILER_PROVIDERS as ɵangular_packages_platform_browser_dynamic_testing_testing_a, TestingCompilerFactoryImpl as ɵangular_packages_platform_browser_dynamic_testing_testing_b, platformCoreDynamicTesting as ɵplatformCoreDynamicTesting };","map":{"version":3,"sources":["../../../../../../packages/platform-browser-dynamic/testing/src/dom_test_component_renderer.ts","../../../../../../packages/platform-browser-dynamic/testing/src/metadata_overrider.ts","../../../../../../packages/platform-browser-dynamic/testing/src/compiler_factory.ts","../../../../../../packages/platform-browser-dynamic/testing/src/platform_core_dynamic_testing.ts","../../../../../../packages/platform-browser-dynamic/testing/src/private_export_testing.ts","../../../../../../packages/platform-browser-dynamic/testing/src/testing.ts","../../../../../../packages/platform-browser-dynamic/testing/public_api.ts","../../../../../../packages/platform-browser-dynamic/testing/index.ts","../../../../../../packages/platform-browser-dynamic/testing/testing.ts"],"names":["getDOM","MetadataOverrider","stringify","platformCoreDynamic","TestingCompilerFactory","INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, ɵgetDOM as getDOM} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\nimport {TestComponentRenderer} from '@angular/core/testing';\n\n/**\n * A DOM based implementation of the TestComponentRenderer.\n */\n@Injectable()\nexport class DOMTestComponentRenderer extends TestComponentRenderer {\n  constructor(@Inject(DOCUMENT) private _doc: any) {\n    super();\n  }\n\n  insertRootElement(rootElId: string) {\n    const template = getDOM().getDefaultDocument().createElement('template');\n    template.innerHTML = `<div id=\"${rootElId}\"></div>`;\n    const rootEl = <HTMLElement>getContent(template).firstChild;\n\n    // TODO(juliemr): can/should this be optional?\n    const oldRoots = this._doc.querySelectorAll('[id^=root]');\n    for (let i = 0; i < oldRoots.length; i++) {\n      getDOM().remove(oldRoots[i]);\n    }\n    this._doc.body.appendChild(rootEl);\n  }\n}\n\nfunction getContent(node: Node): Node {\n  if ('content' in node) {\n    return (<any>node).content;\n  } else {\n    return node;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// `MetadataOverrider` has been moved to core/testing to allow using it from the render3 TestBed\nexport {ɵMetadataOverrider as MetadataOverrider} from '@angular/core/testing';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileReflector, DirectiveResolver, ERROR_COMPONENT_TYPE, NgModuleResolver, PipeResolver} from '@angular/compiler';\nimport {MockDirectiveResolver, MockNgModuleResolver, MockPipeResolver} from '@angular/compiler/testing';\nimport {CompilerFactory, CompilerOptions, Component, ComponentFactory, Directive, Injector, ModuleWithComponentFactories, NgModule, NgModuleFactory, Pipe, StaticProvider, Type, ɵstringify as stringify} from '@angular/core';\nimport {MetadataOverride, ɵTestingCompiler as TestingCompiler, ɵTestingCompilerFactory as TestingCompilerFactory} from '@angular/core/testing';\nimport {ɵCompilerImpl as CompilerImpl} from '@angular/platform-browser-dynamic';\n\nimport {MetadataOverrider} from './metadata_overrider';\n\nexport const COMPILER_PROVIDERS: StaticProvider[] = [\n  {provide: MockPipeResolver, deps: [CompileReflector]},\n  {provide: PipeResolver, useExisting: MockPipeResolver},\n  {provide: MockDirectiveResolver, deps: [CompileReflector]},\n  {provide: DirectiveResolver, useExisting: MockDirectiveResolver},\n  {provide: MockNgModuleResolver, deps: [CompileReflector]},\n  {provide: NgModuleResolver, useExisting: MockNgModuleResolver},\n];\n\nexport class TestingCompilerFactoryImpl implements TestingCompilerFactory {\n  constructor(private _injector: Injector, private _compilerFactory: CompilerFactory) {}\n\n  createTestingCompiler(options: CompilerOptions[]): TestingCompiler {\n    const compiler = <CompilerImpl>this._compilerFactory.createCompiler(options);\n    return new TestingCompilerImpl(\n        compiler, compiler.injector.get(MockDirectiveResolver),\n        compiler.injector.get(MockPipeResolver), compiler.injector.get(MockNgModuleResolver));\n  }\n}\n\nexport class TestingCompilerImpl implements TestingCompiler {\n  private _overrider = new MetadataOverrider();\n  constructor(\n      private _compiler: CompilerImpl, private _directiveResolver: MockDirectiveResolver,\n      private _pipeResolver: MockPipeResolver, private _moduleResolver: MockNgModuleResolver) {}\n  get injector(): Injector {\n    return this._compiler.injector;\n  }\n\n  compileModuleSync<T>(moduleType: Type<T>): NgModuleFactory<T> {\n    return this._compiler.compileModuleSync(moduleType);\n  }\n\n  compileModuleAsync<T>(moduleType: Type<T>): Promise<NgModuleFactory<T>> {\n    return this._compiler.compileModuleAsync(moduleType);\n  }\n  compileModuleAndAllComponentsSync<T>(moduleType: Type<T>): ModuleWithComponentFactories<T> {\n    return this._compiler.compileModuleAndAllComponentsSync(moduleType);\n  }\n\n  compileModuleAndAllComponentsAsync<T>(moduleType: Type<T>):\n      Promise<ModuleWithComponentFactories<T>> {\n    return this._compiler.compileModuleAndAllComponentsAsync(moduleType);\n  }\n\n  getComponentFactory<T>(component: Type<T>): ComponentFactory<T> {\n    return this._compiler.getComponentFactory(component);\n  }\n\n  checkOverrideAllowed(type: Type<any>) {\n    if (this._compiler.hasAotSummary(type)) {\n      throw new Error(`${stringify(type)} was AOT compiled, so its metadata cannot be changed.`);\n    }\n  }\n\n  overrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): void {\n    this.checkOverrideAllowed(ngModule);\n    const oldMetadata = this._moduleResolver.resolve(ngModule, false);\n    this._moduleResolver.setNgModule(\n        ngModule, this._overrider.overrideMetadata(NgModule, oldMetadata, override));\n    this.clearCacheFor(ngModule);\n  }\n  overrideDirective(directive: Type<any>, override: MetadataOverride<Directive>): void {\n    this.checkOverrideAllowed(directive);\n    const oldMetadata = this._directiveResolver.resolve(directive, false);\n    this._directiveResolver.setDirective(\n        directive, this._overrider.overrideMetadata(Directive, oldMetadata!, override));\n    this.clearCacheFor(directive);\n  }\n  overrideComponent(component: Type<any>, override: MetadataOverride<Component>): void {\n    this.checkOverrideAllowed(component);\n    const oldMetadata = this._directiveResolver.resolve(component, false);\n    this._directiveResolver.setDirective(\n        component, this._overrider.overrideMetadata(Component, oldMetadata!, override));\n    this.clearCacheFor(component);\n  }\n  overridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): void {\n    this.checkOverrideAllowed(pipe);\n    const oldMetadata = this._pipeResolver.resolve(pipe, false);\n    this._pipeResolver.setPipe(pipe, this._overrider.overrideMetadata(Pipe, oldMetadata, override));\n    this.clearCacheFor(pipe);\n  }\n  loadAotSummaries(summaries: () => any[]) {\n    this._compiler.loadAotSummaries(summaries);\n  }\n  clearCache(): void {\n    this._compiler.clearCache();\n  }\n  clearCacheFor(type: Type<any>) {\n    this._compiler.clearCacheFor(type);\n  }\n\n  getComponentFromError(error: Error) {\n    return (error as any)[ERROR_COMPONENT_TYPE] || null;\n  }\n\n  getModuleId(moduleType: Type<any>): string|undefined {\n    return this._moduleResolver.resolve(moduleType, true).id;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {COMPILER_OPTIONS, CompilerFactory, createPlatformFactory, Injector, PlatformRef} from '@angular/core';\nimport {ɵTestingCompilerFactory as TestingCompilerFactory} from '@angular/core/testing';\nimport {ɵplatformCoreDynamic as platformCoreDynamic} from '@angular/platform-browser-dynamic';\n\nimport {COMPILER_PROVIDERS, TestingCompilerFactoryImpl} from './compiler_factory';\n\n/**\n * Platform for dynamic tests\n *\n * @publicApi\n */\nexport const platformCoreDynamicTesting: (extraProviders?: any[]) => PlatformRef =\n    createPlatformFactory(platformCoreDynamic, 'coreDynamicTesting', [\n      {provide: COMPILER_OPTIONS, useValue: {providers: COMPILER_PROVIDERS}, multi: true}, {\n        provide: TestingCompilerFactory,\n        useClass: TestingCompilerFactoryImpl,\n        deps: [Injector, CompilerFactory]\n      }\n    ]);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {DOMTestComponentRenderer as ɵDOMTestComponentRenderer} from './dom_test_component_renderer';\nexport {platformCoreDynamicTesting as ɵplatformCoreDynamicTesting} from './platform_core_dynamic_testing';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {createPlatformFactory, NgModule, PlatformRef, StaticProvider} from '@angular/core';\nimport {TestComponentRenderer} from '@angular/core/testing';\nimport {ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS as INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS} from '@angular/platform-browser-dynamic';\nimport {BrowserTestingModule} from '@angular/platform-browser/testing';\n\nimport {DOMTestComponentRenderer} from './dom_test_component_renderer';\nimport {platformCoreDynamicTesting} from './platform_core_dynamic_testing';\n\nexport * from './private_export_testing';\n\n/**\n * @publicApi\n */\nexport const platformBrowserDynamicTesting = createPlatformFactory(\n    platformCoreDynamicTesting, 'browserDynamicTesting',\n    INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS);\n\n/**\n * NgModule for testing.\n *\n * @publicApi\n */\n@NgModule({\n  exports: [BrowserTestingModule],\n  providers: [\n    {provide: TestComponentRenderer, useClass: DOMTestComponentRenderer},\n  ]\n})\nexport class BrowserDynamicTestingModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport * from './src/testing';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// This file is not used to build this module. It is only used during editing\n// by the TypeScript language service and during build for verification. `ngc`\n// replaces this file with production index.ts when it rewrites private symbol\n// names.\n\nexport * from './public_api';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {COMPILER_PROVIDERS as ɵangular_packages_platform_browser_dynamic_testing_testing_a,TestingCompilerFactoryImpl as ɵangular_packages_platform_browser_dynamic_testing_testing_b} from './src/compiler_factory';"]},"metadata":{},"sourceType":"module"}